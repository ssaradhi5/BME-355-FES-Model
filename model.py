import matplotlib as plt
import numpy as np
import math



class FESModel:
  def __init__(self):
    # Model constants for an average subject (75kg - 1.75m)
    self.Tact = 0.01 # Activation constant time [sec]
    self.Tdeact = 0.04 # Relaxation constant time [sec]
    self.J = 0.0197 # Inertia of the foot around ankle [kg * m^2]
    self.d = 3.7 # Moment arm of TA w.r.t the ankle [cm]
    self.B = 0.82 # Viscosity parameters
    self.cF = 11.45 # COM location w.r.t the ankle [cm]
    self.mF = 1.0275 # Mass of the foot [kg]
    self.aV = 1.33 # First force-velocity parameter
    self.fv1 = 0.18 # Second force-velocity parameter
    self.fv2 = 0.023 # Third force-veloctiy parameter
    self.vMax = -0.9 # Maximal contraction speed (shortnening) [m/sec]
    self.FMax = 600 # Maximal isometric force [N]
    self.W = 0.56 # Shape parameter of f-fl
    self.lT = 22.3 # Constant tendon length [cm]
    self.lMT0 = 32.1 # Muscle-tendon length at rest [cm]
    self.a = [2.10, -0.08, -7.97, 0.19, -1.79] # Parameters of elastic torque T-Elastic
    self.g=9.81


#EQN 4
  def roc_excitation(self,sv,T_act,T_deact):
#x1 dot = rate of chance of dynamic level of muscle activation
#x1 = Factivation
    x1=sv[0]
    x1_dot=(u-x1)*((u/T_act)-((1-u)/T_deact))
    return x1_dot
  
#EQN 5
  def rot_velocity(self,sv):
  #x2_dot = absolute rotational velocity
    x2_dot=sv[2]
    return x2_dot

#EQN 6
  def rot_acceleration(self,sv,u,external_sv):
# Rotational Acceleration. Left is first term, right is last
#TODO: Change paramaters to correct function names
    left=(1/self.J)*(self.get_muscle_force(sv,u))*self.d
    T_grav=self.tor_gravity(sv[1])
    T_acc=self.tor_ankle(external_sv,sv)
    T_ela=self.get_torque_elastic(sv)
    right=self.B*(external_sv[3]-sv[2])

    return(left+T_grav+T_acc+T_ela+right)

#EQN 7
  def tor_gravity(self,sv):
#Torque of foot generated by gravity
#Output is a negative value
    x2 = sv[1]
    return (-self.mF*self.cF*math.cos(x2)*self.g)

# EQN 8
  def tor_ankle(self,sv,external_sv):
#Torque of foot generated by ankle movement
    x1_ext=external_sv[0]
    x2_ext=external_sv[1]
    x2=sv[1]
    return(self.mF*self.cF*((x1_ext*math.sin(x2))-(x2_ext*math.cos(x2))))


